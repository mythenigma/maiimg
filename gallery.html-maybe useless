<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Gallery</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
    
    <!-- Google AdSense -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9224406325142860" crossorigin="anonymous"></script>
    <!-- Swiper Latest Version v11.2.10 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            position: relative;
            height: 100%;
            overflow: hidden;
        }

        body {
            background: #000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            color: white;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            transition: opacity 0.5s ease;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 18px;
            font-weight: 300;
            letter-spacing: 2px;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        /* Error Screen */
        .error-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 40px;
            z-index: 9999;
        }

        .error-icon {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.8;
        }

        .error-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .error-message {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 30px;
            max-width: 400px;
            line-height: 1.5;
        }

        .error-button {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .error-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        /* Swiper Container */
        .swiper {
            width: 100%;
            height: 100vh;
            background: #000;
        }

        .swiper-slide {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #000;
            overflow: hidden;
        }

        .swiper-slide img {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease;
        }

        .swiper-slide img:hover {
            transform: scale(1.02);
        }

        /* Navigation Controls */
        .swiper-pagination {
            bottom: 80px !important;
        }

        .swiper-pagination-bullet {
            width: 12px;
            height: 12px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 1;
            transition: all 0.3s ease;
        }

        .swiper-pagination-bullet-active {
            background: #fff;
            transform: scale(1.2);
        }

        .swiper-button-next,
        .swiper-button-prev {
            color: rgba(255, 255, 255, 0.8);
            background: rgba(0, 0, 0, 0.3);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .swiper-button-next:hover,
        .swiper-button-prev:hover {
            background: rgba(0, 0, 0, 0.5);
            color: #fff;
            transform: scale(1.1);
        }

        .swiper-button-next::after,
        .swiper-button-prev::after {
            font-size: 18px;
            font-weight: 600;
        }

        /* Progress Bar */
        .progress-bar {
            position: fixed;
            top: 0;
            left: 0;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            z-index: 1000;
            transition: width 0.3s ease;
        }

        /* Gesture Hint */
        .gesture-hint {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            padding: 10px 15px;
            border-radius: 20px;
            font-size: 12px;
            opacity: 0.8;
            animation: fadeInOut 4s ease-in-out;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        @keyframes fadeInOut {
            0%, 100% { opacity: 0; }
            20%, 80% { opacity: 0.8; }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .swiper-button-next,
            .swiper-button-prev {
                width: 40px;
                height: 40px;
            }

            .swiper-button-next::after,
            .swiper-button-prev::after {
                font-size: 14px;
            }

            .gesture-hint {
                bottom: 20px;
                right: 20px;
                font-size: 11px;
            }
        }

        /* Hide native controls on touch devices - 手机端隐藏按钮 */
        @media (hover: none) and (pointer: coarse) {
            .swiper-button-next,
            .swiper-button-prev {
                display: none;
            }
        }

        /* Ad Container */
        .ad-container {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 999;
            max-width: 90%;
            display: none;
        }

        .ad-container.show {
            display: block;
        }

        /* Fullscreen Mode */
        .fullscreen-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            z-index: 1000;
        }

        .fullscreen-toggle:hover {
            background: rgba(0, 0, 0, 0.7);
            transform: scale(1.1);
        }

        @media print {
            body { display: none; }
        }
    </style>
</head>
<body>

<!-- Loading Screen -->
<div id="loading" class="loading-screen">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading Gallery...</div>
</div>

<!-- Error Screen -->
<div id="error-screen" class="error-screen">
    <div class="error-icon">⚠️</div>
    <div class="error-title">Loading Failed</div>
    <div class="error-message" id="error-text">Please check your connection or try again later</div>
    <button class="error-button" onclick="location.reload()">Reload</button>
</div>

<!-- Progress Bar -->
<div id="progress-bar" class="progress-bar" style="width: 0%;"></div>

<!-- Fullscreen Toggle -->
<button id="fullscreen-toggle" class="fullscreen-toggle" title="Fullscreen Mode">⛶</button>

<!-- Swiper Container -->
<div class="swiper" id="main-swiper" style="display: none;">
    <div class="swiper-wrapper" id="swiper-wrapper">
        <!-- Images will be loaded here -->
    </div>
    
    <!-- Navigation -->
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
    
    <!-- Pagination -->
    <div class="swiper-pagination"></div>
</div>

<!-- Gesture Hint -->
<div id="gesture-hint" class="gesture-hint">
    Swipe to view more
</div>

<!-- AdSense Container -->
<div id="ad-container" class="ad-container">
    <!-- Ads will be displayed here -->
</div>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<script>
class ImageGallery {
    constructor() {
        this.swiper = null;
        this.totalImages = 0;
        this.currentIndex = 0;
        this.init();
    }

    async init() {
        try {
            await this.loadGalleryData();
        } catch (error) {
            this.showError(error.message);
        }
    }

    /**
     * 从友好的URL路径中提取ID
     * 支持格式：/gallery/ID 或 /g/ID
     */
    extractIdFromPath() {
        const path = window.location.pathname;
        console.log('Current path:', path);
        
        // 匹配 /gallery/ID 或 /g/ID 格式
        let match = path.match(/\/(?:gallery|g)\/([^\/\?#]+)/);
        if (match) {
            console.log('Found ID in path:', match[1]);
            return match[1];
        }
        
        // 备用：从查询参数获取
        const urlParams = new URLSearchParams(window.location.search);
        const idFromParams = urlParams.get('id');
        if (idFromParams) {
            console.log('Found ID in params:', idFromParams);
            return idFromParams;
        }
        
        return null;
    }

    /**
     * Decodes the alphabetic ID (e.g., 'A') into a numeric ID (e.g., 1).
     */
    decodeId(encodedId) {
        if (!encodedId || typeof encodedId !== 'string') {
            return null;
        }
        const upperId = encodedId.toUpperCase();
        let decoded = '';
        for (let i = 0; i < upperId.length; i++) {
            const charCode = upperId.charCodeAt(i);
            let digit;
            if (charCode >= 65 && charCode <= 74) { // A-J
                digit = charCode - 64;
            } else if (charCode >= 75 && charCode <= 84) { // K-T
                digit = charCode - 74;
            } else {
                return null;
            }
            if (digit === 10) digit = 0;
            decoded += digit;
        }
        return parseInt(decoded, 10);
    }

    /**
     * Parse User-Agent string to extract key information
     */
    parseUserAgent(ua) {
        const uaLower = ua.toLowerCase();
        let context = '';
        let osName = '';
        let osVersion = '';
        let browserVersion = '';

        // In-App Browsers Detection
        if (uaLower.includes('micromessenger')) {
            context = 'WeChat In-App Browser';
        } else if (uaLower.includes('fb_iab') || uaLower.includes('fbav') || uaLower.includes('fban') || uaLower.includes('fbios')) {
            context = 'Facebook In-App Browser';
        } else if (uaLower.includes('instagram')) {
            context = 'Instagram In-App Browser';
        } else if (uaLower.includes('twitter') || uaLower.includes('twitterandroid')) {
            context = 'Twitter In-App Browser';
        } else if (uaLower.includes('musical_ly') || uaLower.includes('tiktok') || uaLower.includes('bytelocale')) {
            context = 'TikTok In-App Browser';
        } else if (uaLower.includes(' wv')) {
            context = 'Generic In-App WebView';
        }

        // OS Detection
        if (uaLower.includes('android')) {
            osName = 'Android';
            const androidMatch = uaLower.match(/android\s+([0-9]+(?:\.[0-9]+)?)/);
            if (androidMatch) {
                osVersion = androidMatch[1];
            }
        } else if (uaLower.includes('iphone os') || uaLower.includes('cpu os')) {
            osName = 'iOS';
            const iosMatch = uaLower.match(/(?:iphone os|cpu os)\s+([0-9_]+)/);
            if (iosMatch) {
                osVersion = iosMatch[1].replace(/_/g, '.').split('.')[0];
            }
        } else if (uaLower.includes('windows nt')) {
            osName = 'Windows';
            const winMatch = uaLower.match(/windows nt\s*([0-9\.]+)/);
            if (winMatch) {
                const ntVer = winMatch[1];
                if (ntVer.startsWith('10.0')) {
                    osVersion = '10';
                } else if (ntVer.startsWith('6.3')) {
                    osVersion = '8.1';
                } else if (ntVer.startsWith('6.2')) {
                    osVersion = '8';
                } else if (ntVer.startsWith('6.1')) {
                    osVersion = '7';
                } else {
                    osVersion = ntVer;
                }
            }
        } else if (uaLower.includes('mac os x')) {
            osName = 'macOS';
            const macMatch = uaLower.match(/mac os x\s*([0-9_]+)/);
            if (macMatch) {
                const macVer = macMatch[1].replace(/_/g, '.');
                const osParts = macVer.split('.');
                osVersion = osParts[0] + '.' + (osParts[1] || '0');
            }
        } else if (uaLower.includes('linux')) {
            osName = 'Linux';
        }

        // Standalone Browsers Detection (only if not in-app)
        if (context === '') {
            if (uaLower.includes('edg/')) {
                context = 'Edge';
                const edgeMatch = uaLower.match(/edg\/([\d\.]+)/);
                browserVersion = edgeMatch ? edgeMatch[1] : '';
            } else if (uaLower.includes('chrome/') || uaLower.includes('crios/')) {
                context = 'Chrome';
                const chromeMatch = uaLower.match(/(?:chrome|crios)\/([\d\.]+)/);
                browserVersion = chromeMatch ? chromeMatch[1] : '';
            } else if (uaLower.includes('firefox/') || uaLower.includes('fxios/')) {
                context = 'Firefox';
                const firefoxMatch = uaLower.match(/(?:firefox|fxios)\/([\d\.]+)/);
                browserVersion = firefoxMatch ? firefoxMatch[1] : '';
            } else if (uaLower.includes('safari/') && !uaLower.includes('chrome') && !uaLower.includes('crios')) {
                context = 'Safari';
                const safariMatch = uaLower.match(/version\/([\d\.]+)/);
                browserVersion = safariMatch ? safariMatch[1] : '';
            } else {
                context = 'Browser';
            }
        }

        // Build result string
        let result = context;
        if (browserVersion) {
            result += ' ' + browserVersion.split('.')[0];
        }
        if (osName) {
            result += ' (' + osName;
            if (osVersion) result += ' ' + osVersion;
            result += ')';
        }

        return result;
    }

    /**
     * Fetches gallery data from the API.
     */
    async fetchGalleryData(id) {
        // 获取浏览器本地时间
        var d = new Date();
        const browserTime = d.toString();
        
        // 获取完整的原始User-Agent
        const rawUserAgent = navigator.userAgent;
        const parsedUserAgent = this.parseUserAgent(rawUserAgent);
        
        const referrer = document.referrer || 'direct';
        
        // 构建API URL
        const apiUrl = new URL(`https://fetch.maipdf.com/api/gallery/${id}`);
        apiUrl.searchParams.set('browser_time', browserTime);
        apiUrl.searchParams.set('user_agent', rawUserAgent);
        apiUrl.searchParams.set('referrer', referrer);
        
        console.log('📊 Browser info being sent:');
        console.log('  - Time:', browserTime);
        console.log('  - Raw User Agent:', rawUserAgent);
        console.log('  - Parsed User Agent:', parsedUserAgent);
        console.log('  - Referrer:', referrer);
        console.log('  - API URL:', apiUrl.toString());
        
        const response = await fetch(apiUrl.toString());
        
        if (!response.ok) {
            const errorData = await response.json();
            
            // Handle specific error cases with user-friendly messages
            if (response.status === 403 && errorData.error === "Gallery access expired") {
                throw new Error("🚫 This gallery has reached its view limit and is no longer accessible");
            } else if (response.status === 404) {
                throw new Error("❓ Gallery not found. The link may be invalid or expired");
            } else {
                throw new Error(errorData.error || errorData.message || `HTTP error! status: ${response.status}`);
            }
        }
        
        const data = await response.json();
        console.log('✅ Gallery data received:', data);
        
        return data;
    }

    async fetchImageList(markPath) {
        const imageListUrl = `https://fetch.maipdf.com/api/images/${encodeURIComponent(markPath)}`;
        const response = await fetch(imageListUrl);
        
        if (!response.ok) {
            throw new Error('Unable to fetch image list');
        }
        
        const imageList = await response.json();
        if (!imageList.images || imageList.images.length === 0) {
            throw new Error('No images found in this gallery');
        }
        
        return imageList;
    }

    /**
     * Starts the view timer - only shows in the last 100 seconds
     */
    startViewTimer(seconds) {
        if (!seconds || seconds >= 1999999927) {
            console.log('🕐 No time limit set');
            return; // No time limit
        }
        
        console.log(`⏰ Starting view timer: ${seconds} seconds`);
        
        let remainingTime = seconds;
        let timerDisplay = null;
        let timerInterval = null;
        
        // Update timer function
        const updateTimer = () => {
            // Only show timer in the last 100 seconds
            if (remainingTime <= 100 && !timerDisplay) {
                // Create timer display when we reach 100 seconds
                timerDisplay = document.createElement('div');
                timerDisplay.id = 'view-timer';
                timerDisplay.style.cssText = `
                    position: fixed;
                    top: 50px;
                    right: 20px;
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 10px 15px;
                    border-radius: 20px;
                    font-size: 14px;
                    font-weight: 600;
                    z-index: 1001;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    min-width: 120px;
                    text-align: center;
                    transition: all 0.3s ease;
                    animation: slideInRight 0.3s ease-out;
                `;
                document.body.appendChild(timerDisplay);
                
                // Add slide-in animation CSS if not already added
                if (!document.getElementById('timer-animations')) {
                    const style = document.createElement('style');
                    style.id = 'timer-animations';
                    style.textContent = `
                        @keyframes slideInRight {
                            from {
                                transform: translateX(100%);
                                opacity: 0;
                            }
                            to {
                                transform: translateX(0);
                                opacity: 1;
                            }
                        }
                        @keyframes pulse {
                            0%, 100% { opacity: 1; transform: scale(1); }
                            50% { opacity: 0.8; transform: scale(1.05); }
                        }
                    `;
                    document.head.appendChild(style);
                }
                
                console.log('⏰ Timer display activated - 100 seconds remaining');
            }
            
            // Update timer display if it exists
            if (timerDisplay) {
                const minutes = Math.floor(remainingTime / 60);
                const secs = remainingTime % 60;
                const timeString = `${minutes}:${secs.toString().padStart(2, '0')}`;
                
                timerDisplay.innerHTML = `⏰ ${timeString}`;
                
                // Change color as time runs out
                if (remainingTime <= 30) {
                    timerDisplay.style.background = 'rgba(239, 68, 68, 0.9)'; // Red
                    timerDisplay.style.animation = 'pulse 1s infinite';
                    timerDisplay.innerHTML = `🚨 ${timeString}`;
                } else if (remainingTime <= 60) {
                    timerDisplay.style.background = 'rgba(245, 158, 11, 0.9)'; // Orange
                    timerDisplay.innerHTML = `⚠️ ${timeString}`;
                }
            }
            
            remainingTime--;
            
            if (remainingTime < 0) {
                // Time's up - redirect to maiimg.com
                console.log('⏰ Time limit reached, redirecting...');
                
                if (timerDisplay) {
                    // Show redirect notification
                    timerDisplay.innerHTML = '🔄 Redirecting...';
                    timerDisplay.style.background = 'rgba(239, 68, 68, 0.9)';
                    timerDisplay.style.animation = 'pulse 0.5s infinite';
                }
                
                // Redirect after 2 seconds
                setTimeout(() => {
                    window.location.href = 'https://maiimg.com';
                }, 2000);
                
                // Clear the timer
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                return;
            }
        };
        
        // Start the timer
        updateTimer(); // Initial call
        timerInterval = setInterval(updateTimer, 1000);
        
        // Store timer reference for cleanup
        this.viewTimer = timerInterval;
        this.viewTimerDisplay = timerDisplay;
    }

    async loadGalleryData() {
        // 从友好的URL路径中提取ID
        const encodedId = this.extractIdFromPath();

        if (!encodedId) {
            throw new Error("Please use a valid gallery URL, e.g.: /gallery/A");
        }

        // Decode ID
        const numericId = this.decodeId(encodedId);
        if (numericId === null || isNaN(numericId)) {
            throw new Error(`Invalid ID "${encodedId}" provided`);
        }

        // Fetch the data from the D1 database via our API
        const galleryData = await this.fetchGalleryData(numericId);
        
        console.log('🎯 Gallery data received:', galleryData);
        console.log('📊 Remaining views:', galleryData.email);
        console.log('⏰ Time limit:', galleryData.subject, 'seconds');

        // Set page title
        document.title = galleryData.md5 || 'Image Gallery';

        // Start view timer if time limit is set
        if (galleryData.subject && galleryData.subject < 1999999927) {
            this.startViewTimer(galleryData.subject);
        }

        // Get image list
        const imageList = await this.fetchImageList(galleryData.mark);
        
        // Create Swiper slides
        await this.createSlides(imageList.images, galleryData.mark);
        
        // Initialize Swiper
        this.initializeSwiper();
        
        // Show gallery
        this.showGallery();
        
        // Show ads (delayed)
        setTimeout(() => this.showAds(), 3000);
    }

    async createSlides(images, markPath) {
        const wrapper = document.getElementById('swiper-wrapper');
        wrapper.innerHTML = '';
        this.totalImages = images.length;

        images.forEach((imageInfo, index) => {
            const fileName = imageInfo.fileName || imageInfo;
            const fullPath = imageInfo.fullPath || `${markPath}/${fileName}`;
            const imageUrl = `https://fetch.maipdf.com/file/${fullPath}`;

            const slide = document.createElement('div');
            slide.className = 'swiper-slide';
            slide.innerHTML = `
                <img src="${imageUrl}" alt="Image ${index + 1}" loading="lazy">
            `;
            wrapper.appendChild(slide);
        });
    }

    initializeSwiper() {
        this.swiper = new Swiper('.swiper', {
            direction: 'vertical',
            loop: this.totalImages > 1,
            speed: 600,
            effect: 'slide',

            // Navigation
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },

            // Pagination
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
                dynamicBullets: true,
            },

            // 增强的鼠标滚轮支持 - 兼容 Mac 设备
            mousewheel: {
                enabled: true,
                thresholdDelta: 20,
                sensitivity: 0.5,
                forceToAxis: false,
                releaseOnEdges: false,
                invert: false,
                eventsTarget: 'container'
            },

            // Keyboard control
            keyboard: {
                enabled: true,
                onlyInViewport: true,
            },

            // 优化的触摸控制
            touchRatio: 1,
            touchAngle: 45,
            grabCursor: true,
            resistanceRatio: 0.85,

            // Preloading
            preloadImages: false,
            lazy: true,

            // Event listeners
            on: {
                slideChange: (swiper) => {
                    this.currentIndex = swiper.activeIndex;
                    this.updateProgress();
                },
                init: (swiper) => {
                    this.currentIndex = swiper.activeIndex;
                    this.updateProgress();
                    setTimeout(() => {
                        const hintEl = document.getElementById('gesture-hint');
                        if (hintEl) hintEl.style.display = 'none';
                    }, 4000);
                    
                    // 添加额外的 Mac 滚轮事件监听
                    this.addMacScrollSupport();
                }
            }
        });
    }

    // 添加 Mac 滚轮支持的辅助方法
    addMacScrollSupport() {
        let isScrolling = false;
        let scrollTimeout;
        
        // 监听 wheel 事件以支持 Mac 设备
        document.addEventListener('wheel', (e) => {
            if (!this.swiper) return;
            
            // 防止页面滚动
            e.preventDefault();
            
            // 检测滚动方向
            const delta = e.deltaY;
            const threshold = 10;
            
            // 防止过快触发
            if (isScrolling) return;
            
            if (Math.abs(delta) > threshold) {
                isScrolling = true;
                
                if (delta > 0) {
                    // 向下滚动 - 下一张
                    this.swiper.slideNext();
                } else {
                    // 向上滚动 - 上一张
                    this.swiper.slidePrev();
                }
                
                // 重置滚动状态
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(() => {
                    isScrolling = false;
                }, 150);
            }
        }, { passive: false });
        
        // 监听触控板的双指滑动 (Mac trackpad)
        let startY = 0;
        let isTrackpadScrolling = false;
        
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length === 2) {
                startY = e.touches[0].clientY;
                isTrackpadScrolling = true;
            }
        }, { passive: true });
        
        document.addEventListener('touchmove', (e) => {
            if (!this.swiper || !isTrackpadScrolling || e.touches.length !== 2) return;
            
            const currentY = e.touches[0].clientY;
            const deltaY = startY - currentY;
            const threshold = 30;
            
            if (Math.abs(deltaY) > threshold) {
                if (deltaY > 0) {
                    this.swiper.slideNext();
                } else {
                    this.swiper.slidePrev();
                }
                isTrackpadScrolling = false;
            }
        }, { passive: true });
        
        document.addEventListener('touchend', () => {
            isTrackpadScrolling = false;
        }, { passive: true });
    }

    updateProgress() {
        if (this.totalImages > 0) {
            const progress = ((this.currentIndex + 1) / this.totalImages) * 100;
            const progressBar = document.getElementById('progress-bar');
            if (progressBar) {
                progressBar.style.width = `${progress}%`;
            }
        }
    }

    showGallery() {
        const loading = document.getElementById('loading');
        const gallery = document.getElementById('main-swiper');
        
        loading.style.opacity = '0';
        setTimeout(() => {
            loading.style.display = 'none';
            gallery.style.display = 'block';
        }, 500);
    }

    showError(message) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error-text').textContent = message;
        document.getElementById('error-screen').style.display = 'flex';
    }

    showAds() {
        // Google AdSense ad display logic
        try {
            const adContainer = document.getElementById('ad-container');
            // Add AdSense ad code here
            // (adsbygoogle = window.adsbygoogle || []).push({});
            
            // Only show container if there are actual ads to display
            // For now, we'll not show anything unless there's real ad content
            
        } catch (error) {
            console.log('Ad display error:', error);
        }
    }
}

// Fullscreen functionality
document.getElementById('fullscreen-toggle').addEventListener('click', () => {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else {
        document.exitFullscreen();
    }
});

// Prevent right-click and developer tools
document.addEventListener('contextmenu', e => e.preventDefault());
document.addEventListener('keydown', e => {
    if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && e.key === 'I')) {
        e.preventDefault();
    }
});

// Initialize application
document.addEventListener('DOMContentLoaded', () => {
    new ImageGallery();
});
</script>

</body>
</html>
